{"ast":null,"code":"var _jsxFileName = \"/Users/asadali/WebstormProjects/appnotes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /*\n     * Lazily initialize our `notes` state so it doesn't\n     * reach into localStorage on every single re-render\n     * of the App component\n   */\n  const [notes, setNotes] = React.useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n  console.log(\"firstnotes\", notes);\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\");\n  console.log(\"currentNoteId\", currentNoteId);\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes)); //  console.log(notes[0].body.split(\"\\n\"))\n  }, [notes]);\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(3),\n      body: \"# Type your markdown title\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    // Try to rearrange the most recently-modified\n    // not to be at the top\n    setNotes(oldNotes => {\n      const newArray = []; // Create a new empty array\n      // Loop over the original array\n\n      for (let i = 0; i < oldNotes.length; i++) {// if the id matches\n        // put the updated note at the\n        // beginning of the new array\n        // else\n        // push the old note to the end\n        // of the new array\n        // return the new array\n      }\n    }); // This does not rearrange the notes\n    // setNotes(oldNotes => oldNotes.map(oldNote => {\n    //     return oldNote.id === currentNoteId\n    //         ? { ...oldNote, body: text }\n    //         : oldNote\n    // }))\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNote: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"h9rVnagE36yNkFkROwCMD8XJBck=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Sidebar","Editor","data","Split","nanoid","App","notes","setNotes","useState","JSON","parse","localStorage","getItem","console","log","currentNoteId","setCurrentNoteId","id","useEffect","setItem","stringify","createNewNote","newNote","body","prevNotes","updateNote","text","oldNotes","newArray","i","length","findCurrentNote","find","note"],"sources":["/Users/asadali/WebstormProjects/appnotes/src/App.js"],"sourcesContent":["import React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport { data } from \"./data\"\nimport Split from \"react-split\"\nimport {nanoid} from \"nanoid\"\n\nexport default function App() {\n\n\n  /*\n     * Lazily initialize our `notes` state so it doesn't\n     * reach into localStorage on every single re-render\n     * of the App component\n   */\n\n    const [notes, setNotes] = React.useState( () => JSON.parse(localStorage.getItem(\"notes\")) || [])\n\n    console.log(\"firstnotes\",notes)\n\n\n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id) || \"\"\n    )\n\n\n    console.log(\"currentNoteId\",currentNoteId)\n\n    React.useEffect(() => {\n        localStorage.setItem(\"notes\",JSON.stringify(notes))\n      //  console.log(notes[0].body.split(\"\\n\"))\n\n\n    },[notes])\n\n    function createNewNote() {\n        const newNote = {\n            id: nanoid(3),\n            body: \"# Type your markdown title\"\n        }\n        setNotes(prevNotes => [newNote, ...prevNotes])\n\n        setCurrentNoteId(newNote.id)\n    }\n\n    function updateNote(text) {\n        // Try to rearrange the most recently-modified\n        // not to be at the top\n        setNotes(oldNotes => {\n            const newArray = []\n            // Create a new empty array\n            // Loop over the original array\n            for (let i =0; i< oldNotes.length; i++)\n            {\n                // if the id matches\n                // put the updated note at the\n                // beginning of the new array\n                // else\n                // push the old note to the end\n                // of the new array\n                // return the new array\n            }\n\n\n        })\n\n        // This does not rearrange the notes\n        // setNotes(oldNotes => oldNotes.map(oldNote => {\n        //     return oldNote.id === currentNoteId\n        //         ? { ...oldNote, body: text }\n        //         : oldNote\n        // }))\n    }\n\n    function findCurrentNote() {\n        return notes.find(note => {\n            return note.id === currentNoteId\n        }) || notes[0]\n    }\n\n    return (\n        <main>\n            {\n                notes.length > 0\n                    ?\n                    <Split\n                        sizes={[30, 70]}\n                        direction=\"horizontal\"\n                        className=\"split\"\n                    >\n                        <Sidebar\n                            notes={notes}\n                            currentNote={findCurrentNote()}\n                            setCurrentNoteId={setCurrentNoteId}\n                            newNote={createNewNote}\n                        />\n                        {\n                            currentNoteId &&\n                            notes.length > 0 &&\n                            <Editor\n                                currentNote={findCurrentNote()}\n                                updateNote={updateNote}\n                            />\n                        }\n                    </Split>\n                    :\n                    <div className=\"no-notes\">\n                        <h1>You have no notes</h1>\n                        <button\n                            className=\"first-note\"\n                            onClick={createNewNote}\n                        >\n                            Create one now\n                        </button>\n                    </div>\n\n            }\n        </main>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}